var documenterSearchIndex = {"docs":
[{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"EditURL = \"https://github.com/hexaeder/DynamicCascades.jl/blob/main/scripts/rtsgmlc_plot.jl\"","category":"page"},{"location":"generated/rtsgmlc_plot/#Exemplary-dynamic-cascade-in-RTS-GMLC-grid","page":"RTS-GMLC","title":"Exemplary dynamic cascade in RTS-GMLC grid","text":"","category":"section"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"(Image: animation) load used packages","category":"page"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"using Revise\nusing DynamicCascades\nusing Graphs\nusing MetaGraphs\nusing Statistics\nusing GraphMakie\nusing Colors\nusing NetworkDynamics\nusing Unitful\nusing Unitful: @u_str\nusing DataFrames\nusing CSV\nusing CairoMakie\n\n\ninit = 27\ndamping = 0.1u\"s\"\nscale_inertia = 20.0\nnetwork = import_system(:rtsgmlc; damping, scale_inertia, tconst = 0.01u\"s\")","category":"page"},{"location":"generated/rtsgmlc_plot/#test-if-scale_inertia-applies-correctly","page":"RTS-GMLC","title":"test if scale_inertia applies correctly","text":"","category":"section"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"n1 = describe_nodes(network) n1.H","category":"page"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"n2 = describenodes(network) n2.H xstatic=steadystate(network; verbose=true)","category":"page"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"sol = simulate(network;\n               initial_fail = Int[init],\n               tspan = (0, 100),\n               terminate_steady_state=true,\n               trip_lines = :dynamic,\n               solverargs = (;dtmax=0.01), verbose = true);\nnothing #hide","category":"page"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"sol.network sol.initialfail sol.failtime sol.triplines","category":"page"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"sol.loadS sol.loadP sol.failures sol.sol","category":"page"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"plot solution","category":"page"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"function plotnetwork(fig, sol, t)\n    ax = Axis(fig)\n    hidedecorations!(ax), hidespines!(ax)\n    xlims!(ax, -10, 7)\n    ylims!(ax, -5, 7)\n    gpargs = gparguments(sol, t;\n                         colortype=:abssteady,\n                         Δω=Observable(3.0),\n                         offlinewidth=5,\n                         offlinecolor=colorant\"lightgray\",\n                         ecolorscaling = Observable(1.0),\n                         node_size=15)\n    p = graphplot!(ax, network; gpargs...)\n    return ax, p\nend\n\ntobs = Observable(0.0)\nfig = Figure(resolution=(1300,700))\n\nfig[1,1] = Label(fig, @lift(\"t = \"*repr(round($tobs,digits=2))*\" s\"), tellwidth=false)\nfig[2,1], p = plotnetwork(fig, sol, tobs)\n\nfig[:,2] = ax = Axis(fig; xlabel=\"time t in s\", ylabel=\"apparent power flow in p.u.\", title=\"flow transients of failing lines\")\nfor (i, l) in pairs(sol.failures.saveval)\n    t, s = seriesforidx(sol.load_S, l)\n    lines!(ax, t, s; label=\"flow on edge ($i)\", linewidth=5)\nend\nfor (i, l) in pairs(sol.failures.saveval)\n    t, s = seriesforidx(sol.load_S, l)\n    scatter!(ax, (t[end], s[end]); marker=:star5, markersize=35)\nend\nvlines!(ax, tobs; color=:black, linewidth=1)\n\nT = 20\ntmax = 3.5 # tmax = 0.75\nfps = 30\ntrange = range(0.0, tmax, length=Int(T * fps))\n\nrecord(fig, joinpath(PLOT_DIR,\"rtsgmlc_scaleM=$scale_inertia.mp4\"), trange; framerate=30) do time\n    tobs[] = time\nend","category":"page"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"","category":"page"},{"location":"generated/rtsgmlc_plot/","page":"RTS-GMLC","title":"RTS-GMLC","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DynamicCascades","category":"page"},{"location":"#DynamicCascades.jl","page":"Home","title":"DynamicCascades.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a package to explore dynamical induced cascading failures in powergrids. See menu on the left side for some examples.","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"EditURL = \"https://github.com/hexaeder/DynamicCascades.jl/blob/main/scripts/insulators.jl\"","category":"page"},{"location":"generated/insulators/#Dynamic-disturbances-and-topological-insulators","page":"Topological insulator","title":"Dynamic disturbances and topological insulators","text":"","category":"section"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"(Image: animation) load used packages","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"using DynamicCascades\nusing Graphs\nusing MetaGraphs\nusing Statistics\nusing GraphMakie\nusing Colors\nusing ColorSchemes\nusing DynamicCascades: PLOT_DIR\nusing Unitful\nusing NetworkDynamics\nusing DataFrames\nusing CairoMakie\n\nset_theme!(theme_minimal(), fontsize = 20)","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"set up the grid","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"x = 20\ny = 3\nadd_e = [(10, 31),\n         (10, 51),\n         (30, 11),\n         (30, 51),\n         (50, 11),\n         (50, 31)]\nnetwork = import_system(:square; x, y, M=0.5u\"s^2\", D=0.1u\"s\", K=-10u\"pu\", seed=2, add_e)\nregion1 = vcat(1:10, 21:30, 41:50);\nregion2 = vcat(11:20, 31:40, 51:60);\n\nedgetype = map(edges(network)) do e\n    if e.src ∈ region1 && e.dst ∈ region1\n        1\n    elseif e.src ∈ region2 && e.dst ∈ region2\n        2\n    else\n        0\n    end\nend\nnothing #hide","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"Simulate failure of all lines, analyise solution and save maximum pertubation on lines","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"function max_flowdiff(sol::SolutionContainer)\n    init_region = edgetype[sol.initial_fail[]]\n    other_region = init_region == 1 ? 2 : 1\n\n    rege = [findall(isequal(i), edgetype) for i in 1:2]\n\n    static = sol.load_P.saveval[begin]\n    diff = [(abs.(val)-abs.(static))/static[sol.initial_fail[]] for val in sol.load_P.saveval]\n\n    t = sol.load_P.t\n    this  = [maximum(d[rege[init_region]]) for d in diff]\n    other = [maximum(d[rege[other_region]]) for d in diff]\n\n    return (t, this, other)\nend\n\ndf = DataFrame(; edge = Int[], direction=Symbol[], thismax=Float64[], othermax=Float64[],\n               endthis=Float64[], endother=Float64[])\nfor (i, edge) in enumerate(edges(network))\n    edgetype[i] == 0 && continue\n    direction = edge.dst == edge.src+1 ? :h : :v\n    sol = simulate(network;\n                   initial_fail = [i],\n                   failtime = 0.1,\n                   trip_lines = :none,\n                   tspan = (0.0, 100.0),warn=false,verbose=false);\n    (t, this, other) = max_flowdiff(sol)\n    push!(df, (; edge=i, direction, thismax=maximum(this), othermax=maximum(other), endthis=this[end], endother=other[end]))\nend\n\nnothing #hide","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"maximum disturbane in other region after vertical fail","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"extrema(df[df.direction.==:v, :othermax])","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"maximum disturbane in same region after vertical fail","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"extrema(df[df.direction.==:v, :thismax])","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"maximum disturbane in other region after horizontal fail","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"extrema(df[df.direction.==:h, :othermax])","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"maximum disturbane in same region after horizontal fail","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"extrema(df[df.direction.==:h, :thismax])","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"Create plot for thesis","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"sol1 = simulate(network;\n               initial_fail = [60],\n               failtime = 0.1,\n               trip_lines = :none,\n               tspan = (0.0, 50.0),\n               solverargs = (; dtmax = 0.01));\n\nsol2 = simulate(network;\n               initial_fail = [18],\n               failtime = 0.1,\n               trip_lines = :none,\n               tspan = (0.0, 50.0),\n               solverargs = (; dtmax = 0.01));\n\nfig = Figure(resolution=(1500, 600))\nts = [Observable(0.25),\n      Observable(0.5),\n      Observable(1.5),\n      Observable(50.0)]\nfunction graphplot_axis_edges(fig, sol, t::Observable, scaling)\n    ax = Axis(fig)\n    gpargs = gparguments(sol, t;\n                         ecolortype = Observable(:abssteadyboth),\n                         activeP=true,\n                         ecolorscaling=scaling,\n                         )\n    p = graphplot!(ax, network; gpargs...,\n                   node_size=0,\n                   edge_width=5)\n\n    ax.aspect = DataAspect()\n    hidedecorations!(ax); hidespines!(ax)\n    return ax\nend\nscaling = Observable(0.25)\nfor (i,t) in pairs(ts)\n    fig[i,1] = Label(fig, \"t = $(t[])\", tellheight=false)\n    fig[i,2] = graphplot_axis_edges(fig, sol1, t, scaling)\n    fig[i,3] = graphplot_axis_edges(fig, sol2, t, scaling)\nend\nfig[0, 2] = Label(fig, \"horizontal failure\", tellwidth=false)\nfig[1, 3] = Label(fig, \"vertical failure\", tellwidth=false)\n\nfig","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"create the video","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"fig = Figure(resolution=(1000, 400))\nscaling = Observable(0.5)\nt = Observable(0.0)\nfig[1,1] = Label(fig, @lift(\"t = \"*repr(round($t,digits=2))*\" s\"), tellwidth=false)\nfig[2,1] = graphplot_axis_edges(fig, sol1, t, scaling)\nfig[3,1] = graphplot_axis_edges(fig, sol2, t, scaling)\nfig[2, 0] = Label(fig, \"horizontal failure\", tellheight=false)\nfig[3, 1] = Label(fig, \"vertical failure\", tellheight=false)\n\n\nT = 10\ntmax = 3\nfps = 30\ntrange = range(0.0, tmax, length=Int(T * fps))\n\nrecord(fig, \"insulator.mp4\", trange; framerate=30) do time\n    t[] = time\nend","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"Create plot for Defense","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"x = 30\ny = 3\nadd_e = [(15, 46),\n         (15, 76),\n         (45, 16),\n         (45, 76),\n         (75, 16),\n         (75, 46)]\nnetwork1 = import_system(:square; x, y, M=0.5u\"s^2\", D=0.1u\"s\", K=-10u\"pu\", seed=1)\nnetwork2 = import_system(:square; x, y, M=0.5u\"s^2\", D=0.1u\"s\", K=-10u\"pu\", seed=1, add_e)\n@assert describe_nodes(network1).P[15] != describe_nodes(network1).P[16]\n\nsol1 = simulate(network1;\n               initial_fail = [86],\n               failtime = 0.1,\n               trip_lines = :none,\n               tspan = (0.0, 150.0),\n               solverargs = (; dtmax = 0.01));\n\nsol2 = simulate(network2;\n               initial_fail = [90],\n               failtime = 0.1,\n               trip_lines = :none,\n               tspan = (0.0, 150.0),\n               solverargs = (; dtmax = 0.01));\n\nright1 = collect(88:2:114)","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"left1  = reverse(collect(62:2:84))","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"right2 = vcat(92,95, 98:2:120)","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"left2  = reverse(collect(66:2:88))","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"fig = Figure(resolution=(1800, 600))\nax1a = fig[1,1] = Axis(fig, xlabel=\"Time in s\", ylabel=\"Flow Disturbance\", title=\"w/o insulator\")\nmax_dist_1 = Point2[]\nmaxt_dist_1 = Point2[]\nsteady_dist_1 = Point2[]\nfor (dist, idx) in enumerate(right1)\n    t, P = seriesforidx(sol1.load_P, idx, f = P ->(P - sol1.load_P.saveval[1][idx]))\n    if dist in [2,4,6]\n        lines!(ax1a, t, P, label=\"dist = $dist\")\n    end\n    P = abs.(P)\n    pmax, i = firstmax(P)\n    tmax = t[i]\n    push!(max_dist_1, Point(dist, pmax))\n    push!(maxt_dist_1, Point(dist, tmax))\n    push!(steady_dist_1, Point(dist, P[end]))\nend\n\nax1b = fig[1,2]=Axis(fig, xlabel=\"Time in s\", ylabel=\"Flow Disturbance\", title=\"with insulator\")\nmax_dist_2 = Point2[]\nmaxt_dist_2 = Point2[]\nsteady_dist_2 = Point2[]\nfor (dist, idx) in enumerate(right2)\n    t, P = seriesforidx(sol2.load_P, idx, f = P -> (P - sol2.load_P.saveval[1][idx]))\n    if dist in [2,4,6]\n        lines!(ax1b, t, P, label=\"dist = $dist\")\n    end\n    P = abs.(P)\n    pmax, i = firstmax(P)\n    tmax = t[i]\n    push!(max_dist_2, Point(dist, pmax))\n    push!(maxt_dist_2, Point(dist, tmax))\n    push!(steady_dist_2, Point(dist, P[end]))\nend\naxislegend(ax1a)\naxislegend(ax1b)\nxlims!(ax1a, 0, 3)\nylims!(ax1a, -0.15, 0.3)\nxlims!(ax1b, 0, 3)\nylims!(ax1b, -0.15, 0.3)\n\nsave(\"insulator_transients.png\", fig)\n\nfig = Figure(resolution=(1800, 600))\nax1 = fig[1,1] = Axis(fig, xlabel=\"Distance from incidence\", ylabel=\"Maximum disturbance in transient\")\nscatterlines!(ax1, max_dist_1, label=\"w/o insulator\")\nscatterlines!(ax1, max_dist_2, label=\"with insulator\")\naxislegend(ax1)\n\nax2 = fig[1,2] = Axis(fig, xlabel=\"Distance from incidence\", ylabel=\"steady state\")\nscatterlines!(ax2, steady_dist_1, label=\"w/o insulator\")\nscatterlines!(ax2, steady_dist_2, label=\"with insulator\")\naxislegend(ax2)\nsave(\"insulator_pmax.png\", fig)","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"video","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"t = Observable(0.0)\nfig = Figure(resolution=(1200, 400))\nax1 = fig[1,1] = Axis(fig)\nax2 = fig[2,1] = Axis(fig)\nhidedecorations!(ax1), hidespines!(ax1)\nhidedecorations!(ax2), hidespines!(ax2)\nax1.aspect = DataAspect()\nax2.aspect = DataAspect()\ngpargs1 = gparguments(sol1, t;\n                     ecolortype=Observable(:abssteady),\n                     Δω=Observable(3.0),\n                     offlinewidth=5,\n                     offlinecolor=colorant\"black\",\n                     ecolorscaling=Observable(0.5),\n                     node_size=10)\ngpargs2 = gparguments(sol2, t;\n                     ecolortype=Observable(:abssteady),\n                     Δω=Observable(3.0),\n                     offlinewidth=5,\n                     offlinecolor=colorant\"black\",\n                     ecolorscaling=Observable(0.5),\n                     node_size=10)\np1 = graphplot!(ax1, network1; gpargs1..., edge_width=5)\np2 = graphplot!(ax2, network2; gpargs2..., edge_width=5)\n\nT = 20\nfps = 30\ntmax = 5\ntrange = range(0, tmax, length=round(Int, T * fps))\nrecord(fig, \"insulator_video.mp4\", trange; framerate=30) do time\n    t[] = time\nend\n\nt[] = 100.0\nsave(\"insulator_final_state.png\", fig)","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"","category":"page"},{"location":"generated/insulators/","page":"Topological insulator","title":"Topological insulator","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"EditURL = \"https://github.com/hexaeder/DynamicCascades.jl/blob/main/scripts/squaregrid.jl\"","category":"page"},{"location":"generated/squaregrid/#Disturbance-in-Square-Grid","page":"Disturbance in Grid","title":"Disturbance in Square Grid","text":"","category":"section"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"(Image: animation) load necessary packages","category":"page"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"using DynamicCascades\nusing Graphs\nusing MetaGraphs\nusing Statistics\nusing GraphMakie\nusing Colors\nusing ColorSchemes\nusing DynamicCascades: PLOT_DIR\nusing Unitful\nusing NetworkDynamics\nusing CairoMakie\n\nset_theme!(theme_minimal(), fontsize = 20)","category":"page"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"define the grid size and models","category":"page"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"size = 30\nx = 30\ny = 30\nnetwork = import_system(:square; x, y, M=0.5u\"s^2\", D=0.1u\"s\", K=-10u\"pu\", seed=2)\n\nsol = simulate(network;\n               initial_fail = [855],\n               failtime = 0.1,\n               trip_lines = :none,\n               tspan = (0.0, 50.0),\n               solverargs = (; dtmax = 0.01));\nnothing #hide","category":"page"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"plot the solution for thesis","category":"page"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"function graphplot_axis(fig, t::Observable, Δω; title)\n    ax = Axis(fig)\n    edge_color = [:white for i in 1:ne(network)]\n    edge_color[sol.initial_fail] .= :black\n    gpargs = gparguments(sol, t;\n                         Δω,\n                         node_colorscheme = ColorSchemes.diverging_bwr_40_95_c42_n256)\n    graphplot!(ax, network; gpargs...,\n                           edge_color, node_size=12)\n    ax.aspect = DataAspect()\n    ax.title = title\n    hidedecorations!(ax); hidespines!(ax)\n    return ax\nend\n\nfig = Figure(resolution=(1500, 1800))\nt1 = Observable(0.5)\nt2 = Observable(1.5)\nt3 = Observable(3.0)\nt4 = Observable(50.0)\nΔω = Observable(0.12)\nfig[2,1] = nwax = graphplot_axis(fig, t1, Δω; title=\"Frequencies at t₁ = $(t1[])\")\nfig[2,2] = graphplot_axis(fig, t2, Δω; title=\"Frequencies at t₂ = $(t2[])\")\nfig[2,3] = graphplot_axis(fig, t3, Δω; title=\"Frequencies at t₃ = $(t3[])\")\nfig[2,4] = graphplot_axis(fig, t4, Δω; title=\"Frequencies at t₄ = $(t4[])\")\nfig[1,:] = Colorbar(fig, get_node_plot(nwax.scene.plots[2]), height=25,width=1300, vertical=false, label=\"Node frequency in rad/s\",)\n\nfig[3,:] = ax2 = Axis(fig,\n                      title =\"Frequency of selected nodes right of incidence\",\n                      xlabel=\"time t in s\", ylabel=\"frequency ω in rad/s\",\n                      xticks = @lift(([0,4,5, $t1, $t2, $t3, $t4],\n                                      [\"0\", \"4\",\"5\", \"t₁ = $(t1[])\",\"t₂ = $(t2[])\", \"t₃ = $(t3[])\", \"t₄ = $(t4[])\"])))\nax2.xticksvisible[]=true\nax2.yticksvisible[]=true\n\nnd, = nd_model(network);\nωidx = idx_containing(nd, \"ω\");\nselnodes = [436, 438, 440]\nlabels = [\"node 1 to the right of incidence\",\n          \"node 3 to the right of incidence\",\n          \"node 5 to the right of incidence\",]\nfor (n, l) in zip(selnodes, labels)\n    idx = ωidx[n]\n    series = seriesforidx(sol.sol, idx)\n    lines!(ax2, series...; linewidth=5, label=l)\nend\naxislegend(ax2, position=:rt)\nxlims!(ax2, 0, 5)\n\nfunction graphplot_axis_edges(fig, t::Observable, scaling; title)\n    ax = Axis(fig)\n    gpargs = gparguments(sol, t;\n                         ecolortype = Observable(:abssteady),\n                         activeP=true,\n                         ecolorscaling=scaling,\n                         # ecolorscheme = Observable(ColorScheme(ColorSchemes.diverging_bwr_40_95_c42_n256[129:end]))\n                         )\n    p = graphplot!(ax, network; gpargs...,\n                   node_size=0,\n                   edge_width=5)\n\n    ax.aspect = DataAspect()\n    ax.title = title\n    hidedecorations!(ax); hidespines!(ax)\n    return ax\nend\nscaling = Observable(0.22)\nfig[4,1] = nwax2 = graphplot_axis_edges(fig, t1, scaling; title=\"Load difference at t₁ = $(t1[])\")\nfig[4,2] = graphplot_axis_edges(fig, t2, scaling; title=\"Load difference at t₂ = $(t2[])\")\nfig[4,3] = graphplot_axis_edges(fig, t3, scaling; title=\"Load difference at t₃ = $(t3[])\")\nfig[4,4] = graphplot_axis_edges(fig, t4, scaling; title=\"Load difference at t₄ = $(t4[])\")\n\nfig","category":"page"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"create the video","category":"page"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"fig = Figure(resolution=(1000, 600))\nt = Observable(3.0)\nΔω = Observable(0.12)\nfig[2,1] = nwax = graphplot_axis(fig, t, Δω, title=\"node frequencies\")\n\nscaling = Observable(0.22)\nfig[2,2] = nwax2 = graphplot_axis_edges(fig, t, scaling, title=\"line loads\")\n\nfig[1,:] = Label(fig, @lift(\"t = \"*lpad(round($t,digits=1), 4)*\" s\"), tellwidth=false)\n\nT = 20\ntmax = 10\nfps = 30\ntrange = range(0.0, tmax, length=Int(T * fps))\nrecord(fig, \"square_grid.mp4\", trange; framerate=30) do time\n    t[] = time\nend","category":"page"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"","category":"page"},{"location":"generated/squaregrid/","page":"Disturbance in Grid","title":"Disturbance in Grid","text":"This page was generated using Literate.jl.","category":"page"}]
}
